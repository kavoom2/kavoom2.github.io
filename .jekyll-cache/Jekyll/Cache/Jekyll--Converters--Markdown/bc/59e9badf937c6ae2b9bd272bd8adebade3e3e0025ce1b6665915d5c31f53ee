I"vf<p>비동기 호출이란 특정 코드의 연산이 끝날 때까지 실행을 멈추지 않고, 다음 코드를 먼저 실행하는 자바스크립트의 작동방식이다. 가령, 클라이언트가 서버에서 데이터를 요청한다고 해보자. 서버로 데이터를 요청하면 응답이 언제 올지는 명확히 알 수 없다. 요청을 보내놓고 무작정 기다리기보다 다른 코드를 실행하는 것이 나을 것이다.</p>

<h2 id="1-콜백callback">1. 콜백(Callback)</h2>
<p>setTimeout은 비동기 처리의 대표적 예시이다. 코드를 바로 실행하지 않고, 일정시간 만큼 기다린 다음에 실행한다. 여러 작업들을 비동기으로 실행하면서도 순서를 제어할 수 있다. 아래 코드는 비동기적으로 “A”, “B”, “C”를 일정한 순서대로 실행하는 예시이다. 다만 무수한 콜백은 코드 가독성 및 유지보수 측면에서 좋지 않으니 가급적 지양해야 한다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">printString</span> <span class="o">=</span> <span class="p">(</span><span class="nx">string</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span>
        <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">);</span>
            <span class="nx">callback</span><span class="p">();</span>
        <span class="p">},</span>
        <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">printAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">printString</span><span class="p">(</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">printString</span><span class="p">(</span><span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">printString</span><span class="p">(</span><span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
<p>콜백을 사용하면서 바로 함수가 실행되도록 할 수 있지만, 예상과 다른 결과가 발생할 수 있다. 이러한 경우 함수가 실행되지 않고 오류가 출력되도록 설계할 수도 있다. 일반적으로 첫 번째 인자를 error, 마지막 인자를 data로 사용한다. Error Handling Design 예시를 보도록 하자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getDataFromFile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
        <span class="k">else</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-프로미스promise">2. 프로미스(Promise)</h2>
<p>비동기 함수를 순차적으로 실행하다보면 흔히 콜백지옥이라 부르는 상황에 빠질 수 있다. 일반적으로 Promise나 Async를 사용하면 해결할 수 있다.</p>

<p>프로미스는 자바스크립트 비동기 처리에 사용되는 객체이다. 사용하기에 앞서 알아야 할 개념이 있다. 프로미스에는 3가지 상태 “대기, 이행, 실패” 가 있다.</p>

<blockquote>
  <p>대기(Pending): 비동기 로직이 완료되지 않은 상태</p>

  <p>이행(Fulfilled): 비동기 처리가 완료되어 프로미스가 Resolve값을 반환한 상태</p>

  <p>실패(Rejected): 비동기 처리가 실패하거나 오류가 발생하여 Reject값을 반환한 상태</p>
</blockquote>

<p>프로미스를 <code class="language-plaintext highlighter-rouge">new Promise()</code> 메서드로 호출하면 대기상태에 진입한다. 프로미스는 콜백함수를 인자로 받을 수 있으며, 콜백함수는 Resolve와 Reject를 인자로 받는다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</code></pre></div></div>

<p>콜백함수의 인자 resolve를 실행하면 이행상태가 되며, 프로미스의 메서드 then에서 그 값을 매개인자로 받을 수 있다. 마찬가지로 reject를 호출하면 실패 상태가 되며, then과 catch 메서드에서 reject의 값을 인자로 받을 수 있다. 즉, 분기에 따라 then(), catch()로 나뉘어 결과를 출력할 수 있다. 일반적으로 catch는 예제처럼 모든 then 메소드를 거치고 나서 작동하도록 마지막에 붙여준다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getDataFromFilePromise</span> <span class="o">=</span> <span class="nx">filePath</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span> <span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="c1">// catch 에서 error를 받을 수 있다.</span>
            <span class="k">else</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// then에서 data를 받을 수 있다.</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">validPath</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">//Resolve의 값을 매개인자로 받는다.</span>
<span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">invalidPath</span><span class="p">).</span><span class="nx">then</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span> <span class="c1">// Reject의 값을 매개인자로 받는다. 프로미스의 오류는 catch로 받도록 하자.</span>
</code></pre></div></div>

<p>프로미스의 주요한 특징이 하나 더 있다. 바로 여러 개의 프로미스를 사슬처럼 연결하여 사용할 수 있다는 것. 이러한 방식을 프로미스 체이닝(Promise Chaining)이라고 한다. <strong>then() 메서드를 호출하면 새로운 프로미스 객체를 반환하는 것을 이용한 방법이다</strong>. 예제를 한 번 보도록 하자.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예제 1.</span>
<span class="kd">function</span> <span class="nx">readAllUserChaining</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 문자열 상태의 user1, user2를 객체로 변환하고 배열에 담아 반환하는 함수 </span>
  <span class="k">return</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user1Path</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user1</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user2Path</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user2</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user1</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user2</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// 예제 2.</span>
<span class="kd">function</span> <span class="nx">getNewsAndWeather</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">newsURL</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json1</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">weatherURL</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json2</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="na">news</span><span class="p">:</span> <span class="nx">json1</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span>
                    <span class="na">weather</span><span class="p">:</span> <span class="nx">json2</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">})</span>
      <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
<p>단, then은 대기(Pending) 상태인 프로미스를 받아야 정상적으로 작동한다. 아래 예제의 첫 번째 사례와 같이 작성하면 이미 프로미스가 이행되어 제대로 작동하지 않을 수 있다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 수정 전</span>
<span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="nx">getDatafromFilePromise</span><span class="p">(</span><span class="nx">user1Path</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">promise2</span> <span class="o">=</span> <span class="nx">getDatafromFilePromise</span><span class="p">(</span><span class="nx">user2Path</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">promise1</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user1</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">promise2</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user2</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// 이미 promise2가 이행된 상태이면 제대로 작동하지 않는다.</span>
              <span class="k">return</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user1</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user2</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">;</span>
          <span class="p">})</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// 2. 수정 후</span>
<span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user1Path</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user1</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user2Path</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user2</span> <span class="o">=&gt;</span> <span class="k">return</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user1</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">user2</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">;</span>
            <span class="p">})</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>
<span class="p">}</span>


</code></pre></div></div>

<p>Promise.all() 메서드는 순회 가능한 객체를 매개인자로 받는다. 객체 안에 있는 모든 비동기 작업을 이행한 새로운 배열을 프로미스로 반환한다. 이 때, 인자로 받은 프로미스들은 <strong>병렬</strong>로 수행된다.</p>

<p>모든 프로미스들가 이행 상태가 되면 then, catch 등 메소드에 새로이 만든 배열 프로미스를 넘긴다. 만약, 하나라도 비동기 호출이 실패하다면 먼저 실패한 프로미스의 reject가 넘겨진다.</p>

<p>Promise.allSettled()는 Promise.all과 유사하다. 차이점은 내부 프로미스들 중 호출이 실패한 것이 있더라도, 이행된 프로미스들을 추려서 반환할 수 있다는 것이다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예제 1.</span>
<span class="kd">function</span> <span class="nx">readAllUser</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">user1</span> <span class="o">=</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user1Path</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">user2</span> <span class="o">=</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user2Path</span><span class="p">);</span>

    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">user1</span><span class="p">,</span> <span class="nx">user2</span><span class="p">])</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">arr</span> <span class="o">=&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">)));</span>
<span class="p">}</span>
<span class="c1">// 예제 2.</span>
<span class="kd">function</span> <span class="nx">getNewsAndWeatherAll</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">newsURL</span><span class="p">),</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">weatherURL</span><span class="p">)])</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(([</span><span class="nx">newsResponse</span><span class="p">,</span> <span class="nx">weatherResponse</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">newsResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">(),</span> <span class="nx">weatherResponse</span><span class="p">.</span><span class="nx">json</span><span class="p">()]);</span>
       <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(([</span><span class="nx">json1</span><span class="p">,</span> <span class="nx">json2</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span>
              <span class="na">news</span><span class="p">:</span> <span class="nx">json1</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span>
              <span class="na">weather</span><span class="p">:</span> <span class="nx">json2</span><span class="p">,</span>
          <span class="p">}</span>
      <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="3-async와-await">3. async와 await</h2>
<p>async와 await은 프로미스를 조금 더 편리하게 사용하기 위한 목적으로 고안한 문법이다. 함수 앞에 <strong>async</strong>를 붙이면, 해당 함수는 항상 프로미스를 결과값으로 반환한다. 또한, 프로미스가 아닌 값을 반환하더라도 이행 상태의 프로미스로 반환되도록 한다.</p>

<p><strong>await</strong>는 오직 async 함수 내부에서만 사용할 수 있다. 자바스크립트는 await를 만나면 해당 프로미스가 처리될 때 까지 기다린다. 그 전까지 async 내부에 있는 이하의 코드는 실행되지 않는 것. 실제로 코드를 작성해보면 직관적이다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 예제 1.</span>
<span class="kd">const</span> <span class="nx">readAllUserAsyncAwait</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">const</span> <span class="nx">data1</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user1Path</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">data2</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getDataFromFilePromise</span><span class="p">(</span><span class="nx">user2Path</span><span class="p">);</span>

    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data1</span><span class="p">));</span>   
    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data2</span><span class="p">));</span>

    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 예제 2.</span>
<span class="nx">asnyc</span> <span class="kd">function</span> <span class="nx">getNewsAndWeatherAsync</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">json1</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">newsURL</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="o">=&gt;</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
    <span class="kd">const</span> <span class="nx">json2</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">weatherURL</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">resp</span> <span class="o">=&gt;</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="na">news</span><span class="p">:</span> <span class="nx">json1</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span>
        <span class="na">weather</span><span class="p">:</span> <span class="nx">json2</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-reference">4. Reference</h2>
<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN - Promise</a>  <br />
<a href="https://ko.javascript.info/async-await">JAVASCRIPT.INFO - async와 await</a>  <br />
<a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/">자바스크립트 Promise 쉽게 이해하기</a>  <br />
<a href="https://joshua1988.github.io/web-development/javascript/js-async-await/">자바스크립트 async와 await</a></p>
:ET