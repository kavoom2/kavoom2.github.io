I"6<h2 id="개요">개요</h2>
<p>모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 한다. 1차 선이므로 트럭의 순서는 바꿀 수 없다. 트럭은 매 초마다 1칸 씩 움직이며, 다리의 길이는 n칸이다. 또한, 다리가 견딜 수 있는 최대무게와 각 트럭의 무게가 주어진다. 다리에는 버틸 수 있는 무게까지만 트럭들이 올라갈 수 있다.</p>

<h2 id="조건">조건</h2>
<ul>
  <li>다리길이는 1 이상 10,000 이하이다</li>
  <li>트럭 무게는 1 이상 10,000 이하이다.</li>
  <li>대기 중인 트럭의 수는 1 이상 10,000대 이하이다.</li>
  <li>모든 트럭의 무게는 1 이상 다리가 견딜 수 있는 최대무게 이하이다.</li>
</ul>

<h2 id="풀이">풀이</h2>
<p>자료구조 중 큐(Queue)를 사용하는 문제이다. 원리 자체는 크게 어렵지 않은데, 문제를 풀기 전 사건이 일어나는 순서를 명확히해야 한다. 이 부분을 제대로 정리하지 않아 처음에 애를 먹었다.</p>
<blockquote>
  <ol>
    <li>다리에서 건너편으로 건너간다.</li>
    <li>다리 내부에서 다음 칸으로 전진한다.</li>
    <li>다리에 올라갈 수 있다면, 시작지점에서 다리로 넘어온다.</li>
  </ol>
</blockquote>

<p>큐는 배열을 사용하면 구현할 수 있다. 트럭이 다리를 언제 건너야할지만 명확하게 코드로 작성하면 큰 문제는 없을 것이다. 다만, 개선해야할 점은 다리에서 시간만 보내는 부분이 생긴다는 것. 다음 트럭이 건너는데 필요한 최소시간을 계산하여 해결할 수 있을 것이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 개인풀이</span>
<span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">bridgeLength</span><span class="p">,</span> <span class="nx">bridgeWeight</span><span class="p">,</span> <span class="nx">trucksWeights</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">queueCurrentWeight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">trucksWeights</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[];</span>
    
    <span class="k">while</span> <span class="p">(</span> <span class="nx">end</span> <span class="o">&lt;</span> <span class="nx">start</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">answer</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">truck</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="c1">// 1. 맨 앞의 트럭이 넘어갈 수 있는지 확인한다.</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">answer</span> <span class="o">-</span> <span class="nx">truck</span><span class="p">.</span><span class="nx">time</span> <span class="o">&gt;=</span> <span class="nx">bridgeLength</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">queueCurrentWeight</span> <span class="o">-=</span> <span class="nx">truck</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
                <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>
                <span class="nx">end</span> <span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="c1">// 2. 다음 트럭이 다리로 넘어올 수 있는지 확인한다.</span>
        <span class="kd">const</span> <span class="nx">nextTruck</span> <span class="o">=</span> <span class="nx">trucksWeights</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="nx">nextTruck</span> <span class="o">+</span> <span class="nx">queueCurrentWeight</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nx">bridgeWeight</span> <span class="p">)</span> <span class="p">{</span>
            <span class="nx">queueCurrentWeight</span> <span class="o">+=</span> <span class="nx">nextTruck</span><span class="p">;</span>
            <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">time</span><span class="p">:</span> <span class="nx">answer</span><span class="p">,</span> <span class="na">weight</span><span class="p">:</span> <span class="nx">nextTruck</span><span class="p">});</span>
            <span class="nx">trucksWeights</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET