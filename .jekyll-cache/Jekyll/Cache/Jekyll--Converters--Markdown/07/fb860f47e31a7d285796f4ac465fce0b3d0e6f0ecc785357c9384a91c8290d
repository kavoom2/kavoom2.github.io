I"L.<p>글을 쓰기에 앞서 좋은 컨텐츠와 강의를 제공해주신 개발자 <a href="https://www.youtube.com/user/cmiscm"><strong>Interactive Developer</strong></a>님에게 감사의 말씀을 드리고 싶다. 덕분에 HTML5와 자바스크립트만으로도 다양한 시각적 경험을 만들 수 있다는 것을 알게 되었다. 그리고 올려주신 정말 좋은 영상들을 보면서 이를 어떻게 활용할지 알 수 있었다. 지금까지 올리신 강의는 <a href="https://youtube.com/playlist?list=PLGf_tBShGSDNGHhFBT4pKFRMpiBrZJXCm"><strong>이 곳</strong></a>에서 볼 수 있다. 심지어 무료다.</p>

<h2 id="1-프로젝트를-하게-된-계기">1. 프로젝트를 하게 된 계기</h2>
<center><img src="https://drive.google.com/uc?export=view&amp;id=1n5plZiRSb7SqJKK3roX5aXZ-6d8SdZDs" /></center>

<p>폴 가이 토이 프로젝트를 진행하게 된 이유는 두 가지였다. 하나는 예전부터 “개인적으로 정말 만들고 싶은 것”을 내 손으로 만드려는 욕구를 해소하고 싶었기 때문이고, 다른 하나는 Interactive Developer님의 이야기가 크게 와닿았기 때문이다. 어도비 플래시에 관한 내용으로 개발 툴의 패러다임이 바뀌어도 적응할 수 있는 기초를 다져야 한다는 내용이었다. 그 내용을 들었을 때 정말 머리가 띵했었다.</p>

<p>마침 부트캠프에서 클래스에 관한 개념을 어느정도 잡아놨었고, 다행히 많이 바쁜 시기는 아니었다. 이 만한 기회는 없다고 생각하고 즉시 행동에 옮겼다.</p>

<h2 id="2-무엇을-구현할-것인가">2. 무엇을 구현할 것인가</h2>

<p>의욕도 앞서고 하고 싶은 것은 정말 많지만, 과욕은 일을 망치기도 하는 법이다. 진행하기에 앞서 무게를 두고 먼저 구현해야 할 것들을 정리했다.</p>
<blockquote>
  <p>다양한 움직임을 구현하되, CSS는 최소한으로 사용하고 자바스크립트로 구현하기</p>

  <p>HTML5 캔버스의 다양한 기능을 찾아보고 직접 사용해보기</p>

  <p>HTML, Javascript에서 프레임 단위로 애니메이션을 재생하는 기능 활용하기</p>
</blockquote>

<p>게임으로 만들고 싶은 욕구가 가득하지만 실력을 한 단계 끌어올리는게 주된 목적이니 부차적인 기능들은 미뤄두었다. 마침 최근에 재밌게 했던 폴가이즈를 바탕으로 만들고 싶었는데, 무엇을 구현할지는 폴가이즈 몇 판하면서 정리했다.</p>

<center><img src="https://drive.google.com/uc?export=view&amp;id=1Aa7Fm4JBM4RNkRlrVl5TtXtqP1TZllZe" /></center>

<p>메인화면과 게임 스테이지를 만들고, 게임은 횡스크롤 형식의 피하기 게임으로 계획했다. 피그마에 만들었던 초기 디자인과는 많이 달라졌는데, 예상보다 시각적인 요소들이 제 기능을 못하다보니 변경사항이 꽤나 많이 생겼다.</p>

<p>현재까지 구현하고, 앞으로 구현할 핵심요소들은 다음과 같다.</p>
<blockquote>
  <p>바람 - 집중선 형태로 캐릭터가 달리는 효과를 강조한다.</p>

  <p>움직이는 캐릭터 - gif 파일이 아닌 스프라이트 이미지를 사용하여 달리거나 뛰는 행동을 구사한다.</p>

  <p>움직이는 바닥 - 바닥은 서로 다른 색상의 블록으로 구성되었고, 캐릭터가 이동함에 따라 원근법을 적용하여 서서히 지평선으로 사라지도록 한다.</p>

  <p>장애물 - 캐릭터가 피해야 할 간단한 장애물을 추가한다. 점차 크기가 줄어들고 지평선으로 사라져야 한다. 또한, 캐릭터와 장애물이 충돌했는지 판단해야 한다.</p>
</blockquote>

<p>현재 장애물을 제외한 나머지 요소들은 구현하였다. 이제 장애물과 기본적인 게임 시스템만 구현하면 된다.</p>

<h2 id="3-핵심요소-구현">3. 핵심요소 구현</h2>
<h3 id="3-1-애니메이션-재생">3. 1. 애니메이션 재생</h3>
<p>애니메이션을 재생하는 방법은 영화관 영사기를 떠올리면 된다. 그림을 매우 짧은 간격으로 바꾸어서 마치 움직이는 것처럼 보이게 하는 원리이다. 다만 필름처럼 이미 모든 그림이 완성된 상태는 아니다보니, 매 프레임마다 캔버스를 지우고 요소들을 그려주는 과정이 필요하다.</p>

<p><a href="https://developer.mozilla.org/ko/docs/Web/API/Window/requestAnimationFrame">window.requestAnimationFrame</a>으로 애니메이션을 재생할 수 있다. 이전에 테트리스 클론 토이 프로젝트에서도 언급한 내용이지만 주의할 점이 있다. 하드웨어 성능 차이 때문에 모니터마다 주사율이 천차만별인데, 재생할 수 있는 최대 프레임에 따라 재생속도가 달라질 수 있다. 60장의 그림을 재생하는데 한 모니터는 1초 동안 보여주고, 다른 모니터는 0.5초동안 보여준다고 생각하면 이해가 될 것이다.</p>

<p>이 문제는 requestAnimationFrame의 콜백함수가 인자로 받는 <strong>TimeStamp</strong>를 활용하면 된다. 일정시간마다 움직이도록 구현하면 되는데, 다음 예제를 살펴보자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">App</span> <span class="p">{</span>
    <span class="kd">constructor</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">animate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="c1">// 콜백함수에서 실행할 draw 함수들의 this를 바인딩해주어야 한다.</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">groundLine</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GroundLine</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">animate</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// requestAnimationFrame 함수는 타임스탬프를 매개인자로 받는다.</span>
    <span class="kd">let</span> <span class="nx">requestID</span> <span class="o">=</span> <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">animate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">stageWidth</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">stageHeight</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">groundLine</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">GroundLine</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>

    <span class="p">}</span>
    <span class="nx">draw</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">time</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">t</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span> <span class="nx">now</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">// 1000ms 마다 움직이도록 한다.</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">time</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
            <span class="c1">// 이하 움직이도록 하는 함수를 작성.</span>
        <span class="p">}</span>
        <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
        <span class="c1">// 각 점을 이어서 선분으로 만드는 함수는 생략</span>
        <span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
        <span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>콜백함수 animate(t)는 재귀적으로 실행된다. 실행될 때마다 현재 타임스탬프를 자동적으로 받아오게 된다. 이 값을 각 요소를 그리는 함수(Class.draw)에 넣어서 일정 시간마다 움직이도록 만들어주면 된다.</p>

<h3 id="3-2-바람하늘-집중선">3. 2. 바람(하늘 집중선)</h3>
<p>하늘 끝 지점에서 생성된 임의의 폭, 길이를 가진 사각형이 화면 중심으로 이동하도록 하였다. 시간이 지남에 따라 크기와 속도가 줄어들도록 하였는데, 이는 일정시간마다 정해놓은 값을 나누어 현재 크기와 속도값가 지수함수 형태로 줄어들도록 하였다. 이 경우 중앙에 도달하지 못한 선분이 있을 수 있는데, 사각형의 폭이 일정 크기 이하가 되면 제거되도록 하였다.</p>

<p>들었던 강의의 도움을 받아 이 강조선들을 관리하는 Wind-Controller 클래스를 만들었다. 컨테이너는 일정 개수 미만의 Wind 인스턴스들을 가지도록 하고, 각 인스턴스가 종료조건을 만족하는지 확인한다. 종료조건에 해당하면 해당 선분을 제거하고 새로운 Wind 인스턴스를 생성한다.</p>

<p>강조선이 이동하려면 시작점과 종료지점 사이의 각도를 알아야 한다. 그리고 이 값으로 X축과 Y축 변화량 dx, dy를 계산하면 된다. 두 점 사이의 각도는 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2">Math.atan2()</a>로 계산하면 된다.</p>

<h3 id="3-3움직이는-캐릭터">3. 3.움직이는 캐릭터</h3>
<p>폴 가이즈를 해본 적이 있는 캐릭터 움직임이 굉장히 답답하다는 것을 알 것이다.</p>

<h2 id="링크">링크</h2>
<p><a href="https://github.com/kavoom2/toy-fall-guy"><strong>토이 프로젝트 GitHub</strong></a>   <br />
<a href="https://youtu.be/-F0pgU2-TAg"><strong>테스트 영상 - 2021. 01. 19.</strong></a></p>
:ET