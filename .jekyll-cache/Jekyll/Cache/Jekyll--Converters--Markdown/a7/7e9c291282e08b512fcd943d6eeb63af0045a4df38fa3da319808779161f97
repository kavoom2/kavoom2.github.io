I"@<p>Node.js는 Javascript가 동작할 수 있는 환경 또는 프로그램인 런타임(Runtime) 중 하나이다. Javascript 코드를 브라우저에서 실행할 수도 있고, Node.js에서도 실행할 수 있는 것. 다음 예제에서는 터미널에서 Node.js로 스크립트를 실행한 결과를 출력한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// runnode.js</span>
<span class="kd">function</span> <span class="nx">testFunction</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Arg is </span><span class="dl">"</span><span class="p">,</span> <span class="nx">arg</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">testFunction</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span>

<span class="c1">// terminal</span>
<span class="nx">$</span> <span class="nx">Node</span> <span class="nx">runnode</span><span class="p">.</span><span class="nx">js</span> <span class="c1">// "Arg is 20"</span>
</code></pre></div></div>

<h2 id="nvm">NVM</h2>
<p>Node.js를 사용하려면 관련 프로그램들이 필요하다. 먼저 Node.js를 설치, 관리하는 NVM(Node.js Version Manager)을 살펴보자. NVM이 설치되었다면, 다음 명령어를 실행하여 현재 버전을 확인할 수 있다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">nvm</span> <span class="o">--</span><span class="nx">version</span>
</code></pre></div></div>
<p>설치할 수 있는 Node.js의 버전은 다음 명령어로 확인할 수 있다. 원하는 버전을 설치하면 된다. 다만, 호환성 문제가 발생기지 않도록 LTS(Long Term Supported) 버전을 설치하자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">nvm</span> <span class="nx">ls</span><span class="o">-</span><span class="nx">remote</span> <span class="o">--</span><span class="nx">lts</span> <span class="c1">// 설치가능한 버전 확인</span>
<span class="nx">nvm</span> <span class="nx">isntall</span> <span class="mf">14.15</span><span class="p">.</span><span class="mi">4</span>
</code></pre></div></div>
<p>제대로 설치되었는지 확인해보려면 버전을 출력해보자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">Node</span> <span class="o">-</span><span class="nx">v</span>
</code></pre></div></div>
<p>여러 버전을 설치하여 사용한다면 다음 명령어로 버전을 변경하면서 사용할 수 있다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">nvm</span> <span class="nx">use</span> <span class="mf">14.15</span><span class="p">.</span><span class="mi">4</span>
<span class="nx">nvm</span> <span class="nx">use</span> <span class="mf">12.16</span><span class="p">.</span><span class="mi">1</span>
</code></pre></div></div>
<h2 id="npm">NPM</h2>
<p>NPM(Node Package Manager)은 프로그램에 필요한 모듈을 받을 수 있는 앱스토어의 일종이다.</p>

<h2 id="packagejson">package.json</h2>
<p>프로젝트는 필연적으로 다른 사람들과 함께 개발하고 사용하게 된다. 프로그램에 필요한 모듈이 무엇이고 어떻게 실행하는지를 알아야한다. package.json이 이러한 내용들을 알려주는 설명서다.</p>

<p>참고로 프로젝트에 필요한 모듈 파일들은 node_modules에 설치되어 있다.</p>

<p>package.json에서 scripts는 npm으로 실행할 수 있는 명령어를 정의한다. 아래 예제를 보도록 하자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// package.json</span>
<span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Node app.js</span><span class="dl">"</span>
    <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Node test.js</span><span class="dl">"</span>
<span class="p">}</span>

<span class="c1">// terminal</span>
<span class="nx">$</span> <span class="nx">npm</span> <span class="nx">run</span> <span class="nx">test</span> <span class="c1">// test.js를 실행</span>
<span class="nx">$</span> <span class="nx">npm</span> <span class="nx">run</span> <span class="nx">start</span> <span class="c1">// app.js을 실행</span>
</code></pre></div></div>

<h2 id="dev-dependencies-vs-dependencies">dev Dependencies vs dependencies</h2>
<p>package.json에는 devDependencies와 dependencies가 있다. 전자는 로컬 개발 및 테스트 과정에서만 필요한 패키지이다. 실제 배포에는 포함되지 않는다. 후자는 프로그램의 실제 기술스펙으로 사용되는 패키지이다.</p>

<p>패키지를 설치할 때 다음 명령어로 각각 구분하여 설치한다. –save 명령어는 패키지 간 충돌을 잡아준다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span> <span class="o">-</span><span class="nx">dev</span> <span class="c1">// devDependencies 패키지 설치</span>
<span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span> <span class="c1">// Dependencies 패키지 설치</span>
</code></pre></div></div>

<p>스프린트 과제 패키지 설치 중 오류가 발생하면 다음 명령어를 입력해보자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sh</span><span class="p">.</span> <span class="nx">registry</span><span class="p">.</span><span class="nx">sh</span>
</code></pre></div></div>
:ET