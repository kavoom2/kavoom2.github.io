I":<p>객체지향 프로그래밍은 객체를 중심으로 프로그래밍을 하는 방법론이다. 실제 세계를 모방하여 각 객체는 속성과 기능을 가진다. 그리고,</p>

<h2 id="2-객체-지향-프로그래밍의-특징">2. 객체 지향 프로그래밍의 특징</h2>
<h3 id="2-1-캡슐화encapsulation">2. 1. 캡슐화(Encapsulation)</h3>
<p>캡슐화는 변수와 함수를 하나의 단위로 묶는 것이다. 자바스크립트에서는 클래스라는 개념으로 구현하고 있다. 클래스의 인스턴스를 생성하면 클래스 안에 담겨있는 특징, 기능에 쉽게 접근할 수 있다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nx">Speaker</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">volume</span> <span class="o">=</span> <span class="nx">num</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">volumeUp</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">volume</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">volumeDown</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">volume</span> <span class="o">-=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">printVolume</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">volume</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">printColor</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span> 

<span class="nx">speaker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Speaker</span><span class="p">(</span><span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>

<span class="nx">speaker</span><span class="p">.</span><span class="nx">volumeUp</span><span class="p">()</span>
<span class="nx">speaker</span><span class="p">.</span><span class="nx">printVolume</span><span class="p">()</span> <span class="c1">// 40</span>
<span class="nx">speaker</span><span class="p">.</span><span class="nx">printColor</span><span class="p">()</span> <span class="c1">// "black"</span>
</code></pre></div></div>
<p>클래스 스피커 안에 각 인스턴스의 특성(색상, 볼륨)이 변수로 기능은 프로토타입 함수로 구현된다. 인스턴스 speaker에서 각 기능을 쉽게 사용한 것을 확인할 수 있다.</p>

<p>캡슐화는 구체적인 정보를 외부로 최소한 노출시킨다. 이를 정보은닉이라고 하는데, 클래스 외부에서 특정 메소드로만 접근하도록 하는 것이다.</p>

<p>소리크기를 조절하는 함수를 살펴보자.</p>

<h3 id="2-2-추상화abstraction">2. 2. 추상화(Abstraction)</h3>

<h3 id="2-3-상속inheritance">2. 3. 상속(Inheritance)</h3>

<h3 id="2-4-다형성polymorphism">2. 4. 다형성(Polymorphism)</h3>
:ET