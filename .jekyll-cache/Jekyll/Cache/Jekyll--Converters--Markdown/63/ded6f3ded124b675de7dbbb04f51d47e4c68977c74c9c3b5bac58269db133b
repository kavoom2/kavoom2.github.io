I"mq<h2 id="1-httpshyper-text-transfer-protocol-secure-socket-layer">1. HTTPS(Hyper Text Transfer Protocol Secure Socket Layer)</h2>
<p>HTTP 프로토콜의 내용을 암호화한 프로토콜. HTTP over SSL이라 부르기도 한다.</p>

<p>HTTP보다 안전한 프로토콜이며, 데이터 제공자의 신원을 보장할 수 있다. 클라이언트는 데이터 제공자가 제공한 데이터밖에 사용할 수 없다. 그러다보니 요청 및 응답을 중간에 가로채는 중간자 공격에 취약하다. 이를 보완하려면, 해당 데이터가 <strong>특정 도메인</strong>에서 전달되었다는 추가 데이터를 응답에 실어 보내서 요청과 응답의 도메인을 비교할 수 있도록 하며 된다.  물론, 이러한 데이터도 변조할 수 있으니 암호화 작업이 필요하다.</p>

<p><strong>HTTPS에서 사용하는 인증서(Certificate)</strong>는 데이터 제공자의 신원을 보장하는 장치이다. 
먼저, 요청을 받은 서버는 응답에 인증서를 포함하여 전달한다.
이후 클라이언트가 응답을 받으면, 요청 인증서의 도메인과 응답 인증서의 도메인을 비교하여 데이터 제공자의 신원을 확인한다.</p>

<p>따라서, 응답 인증서의 도메인이 요청에 있는 것과 다르다면 제 3자가 위조한 것임을 알 수 있다.</p>

<p><strong>CA(Certificate Authority)</strong>는 인증서를 발급하는 공인된 기관이다.</p>

<p><strong>HTTPS에서는 비대칭 키</strong>도 사용한다. 정보를 Key A로 암호화를 했다면, 복호화할 때는 전혀 다른 Key B가 필요하다. 즉, HTTPS는 두 개의 키를 한 쌍으로 사용한다. 하나는 숨겨두고, 다른 하나는 클라이언트에 공개하여 데이터를 안전하게 전달할 수 있도록 한다.</p>

<h3 id="1-1로컬-환경에서-인증서-생성">1. 1.로컬 환경에서 인증서 생성</h3>

<p><a href="https://github.com/FiloSottile/mkcert"><strong>mkcert</strong></a>라는 프로그램을 사용하여 로컬환경 내에 신뢰할 수 있는 인증서를 만들 수 있다. 다음은 인증서의 개인키(Key)와 서명한 인증서(Cert)를 생성하는 명령어이다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 먼저 인증서를 설치할 디렉토리로 이동한다.</span>
<span class="nx">$</span> <span class="nx">mkcert</span> <span class="o">-</span> <span class="nx">install</span>
<span class="nx">$</span> <span class="nx">mkcert</span> <span class="o">-</span><span class="nx">key</span><span class="o">-</span><span class="nx">file</span> <span class="nx">key</span><span class="p">.</span><span class="nx">pem</span> <span class="o">-</span><span class="nx">cert</span><span class="o">-</span><span class="nx">file</span> <span class="nx">cert</span><span class="p">.</span><span class="nx">pem</span> <span class="nx">localhost</span> <span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span> <span class="p">::</span><span class="mi">1</span> <span class="c1">// localhost, 127.0.0.1(IPv4), ::1(IPv6)에서 사용할 수 있는 인증서 생성</span>
</code></pre></div></div>

<h2 id="2-hashing">2. Hashing</h2>
<p>임의의 연산을 적용하여 다른 문자열로 적용하는 것이다. 해싱에는 3가지 원칙이 있다.</p>

<blockquote>
  <ol>
    <li>모든 값에 대해 해시 값을 계산하는데 오래 걸리지 않아아 햔다.</li>
    <li>가능하면 중복되는 해시값이 없도록 해야하며, 모든 값이 고유한 해시값을 가질 수 있도록 한다.</li>
    <li>유추할 수 없도록 아주 작은 단위의 문자열이 변경도 완전히 다른 해시값을 가져야 한다.</li>
  </ol>
</blockquote>

<p><strong>Salt</strong>는 암호화할 값에 <strong>임의로 정한 별도의 문자열</strong>을 추가하여 결과를 변형하는 것. 암호화 알고리즘이 노출되더라도 원본값을 보호할 수 있는 안전장치이다. Salt에도 지켜야 할 4가지 원칙이 있다.</p>

<blockquote>
  <ol>
    <li>Salt는 유저와 패스워드마다 유일한 값을 가져야 한다.</li>
    <li>사용자 계정을 생성할 때, 비밀번호를 변경할 때 새로운 임의의 Salt를 사용해야 한다.</li>
    <li>Salt는 재사용하면 안된다.</li>
    <li>Salt는 DB의 유저 Table에 같이 저장해야 한다.</li>
  </ol>
</blockquote>

<p>3 Tier Architecture에서 적용은 대략 아래 그림과 같다.
// &lt;div class="mermaid"&gt;
// sequenceDiagram
//     Client-»+Server: email: a@naver.com<br />password:asdf
//     Server-»+Server: password 암호화<br />asdf –&gt; fghj
//     Database-»+Server: email: a@naver.com<br />password: fghj
//     Server-»+Server: 비교하여 일치여부 확인
//     Database-»+Server: a@naver.com의<br />phoneNumber, address 등.. 전달
//     Server-»+Client: Resp<br />email, phoneNumber… 전달
// &lt;/div&gt;</p>

<h2 id="3-cookie">3. Cookie</h2>
<p>HTTP의 비연결성(connectionless), 무상태성(stateless)을 보완하기 위한 데이터이다. 어떤 웹사이트에 들어갔을 때 서버가 일방적으로 클라이언트에 전달하는 데이터이다. 해외에서는 정책상 쿠키 사용여부를 확인한다. 쿠키는 서버가 클라이언트에 정보를 저장하거 불러올 수 있다. 클라이언트는 해당 도메인에 대한 쿠키가 존재하면 HTTP 요청 전달시 쿠키를 함께 전달할 수 있다.</p>

<p>사용자 선호, 테마 등 장기간 보존해야 하는 정보를 저장하는데 적합하다.</p>

<h2 id="4-session">4. Session</h2>
<p>서버가 Client에 유일하고 암호화된 ID를 부여하고, 중요 데이터는 서버에서 관리한다. 신뢰할 수 있는 유저인지 서버에서 확인할 수 있지만, 클라이언트를 확인하려면 접속상태를 알고 있어야하므로 서버를 분산하는 경우에 적합하지 않다. 또한 서버의 메모리에 이용자 정보를 저장하고 있기에 가용할 수 있는 메모리가 한정적이다.</p>

<h1 id="5-token-base-aunthetication">5. Token-base Aunthetication</h1>
<p><a href="https://jwt.io/"><strong>JSON Web Token</strong> </a>을 사용하도록 한다.</p>
<blockquote>
  <p><strong>aaaaa(header).bbbb(payload).cccc(signature)</strong></p>

  <ol>
    <li>header: 토큰 종류, 암호화 알고리즘</li>
    <li>payload: 유저의 정보, 권한 여부, 기타 정보</li>
    <li>signature: Header, payload를 base64로 인코딩 한 값과 Salt값의 조합으로 암호화한 값</li>
  </ol>
</blockquote>

<p><strong>Access Token</strong>은 보호된 정보(유저 개인정보)에 접근할 수 있는 권한부여에 사용한다. 클라이언트가 처음 인증을 받을 때(로그인), Access와 Refresh Token을 받으나 실제로 권한을 얻는데 사용한 것은 Access token이다. 권한을 부여받는데에는 Access token만 있으면 되지만, 제 3자가 탈취할 수 있기 때문에, 짧은 유효기간을 가지고 있다.</p>

<p><strong>Refresh token</strong>은 Access token이 만료되면 Refresh token으로 새로운 Access token을 발급받게 된다.</p>

<p>Token의 장점은 다음과 같다.</p>
<blockquote>
  <ol>
    <li>
      <p>Stateless, Scalability(무상태성, 확장성): 세션과 달리 서버는 클라이언트 정보를 저장할 필요가 없으며, 해독이 되는지만 판단한다. 클라이언트가 새로운 요청을 보낼 때 헤더에 토큰을 담으면 된다. 동일 토큰으로 여러 서버에서 인증 가능</p>
    </li>
    <li>
      <p>안전성: 암호화한 토큰을 사용하며, 암호화 키를 노출할 필요가 없으므로 안전함.</p>
    </li>
    <li>
      <p>어디서나 생성가능: 토큰을 확인하는 서버가 꼭 토큰을 만들 필요는 없음. 토큰 생성용 서버나 외부의 서버를 사용하여 생성하여도 해독만 가능하면 무방.</p>
    </li>
    <li>
      <p>권한 부여에 용이: 토큰의 Payload 안에 어떤 정보에 접근 가능한지 정할 수 있다.</p>
    </li>
  </ol>
</blockquote>

<h1 id="6-oauth-2">6. OAuth 2</h1>
<p>일반적으로 많이 사용하는 소셜 로그인 인증방식이다. 인증을 중개하는 매커니즘. 이미 사용자 정보를 가지고 있는 웹 서비스(GitHub, google, facebook 등…)에서 사용자의 인증을 대신 해주고 접근권한에 대한 토큰을 발급하면, 이를 이용해 서버 내에 인증을 하는 방식이다.</p>

<p>다만, <strong>인증(Authentication)을 다른 서비스에 맡기는 것이며, 권한 관리(Authorization)은 서버에서 담당</strong>해야 한다.</p>

<p>다음은 OAuth에서 알아두어야 할 용어들이다.</p>

<blockquote>
  <ul>
    <li>Resource Owner: 액세스 중인 리소스의 유저</li>
    <li>Client: Resource owner를 대신하여 보호된 리소스에 액세스하는 응용프로그램</li>
    <li>Resouce server: Client의 요청을 수락하고 응답할 수 있는 서버</li>
    <li>Authorization server: Resource server가 액세스 토큰을 발급받는 서버</li>
    <li>Authorization grant: 클라이언트가 액세스 토큰을 얻을 때 사용한 자격증명</li>
    <li>Authorization code: Access token을 발급받기 전 필요한 Code</li>
    <li>Access token: 보호된 리소스에 액세스하는 데 사용할 Credentials</li>
    <li>Scope: 주어진 액세스 토큰을 사용하여 액세스할 수 있는 리소스 범위</li>
  </ul>
</blockquote>

<p><strong>Grant Type</strong>은 Client가 액세스 토큰을 얻는 방법으로, 대표적으로 Authorization Code Grant Type, Refresh Token Grant Type 등이 있다.</p>

<blockquote>
  <ol>
    <li>
      <p>Authorization Code Grant Type: 가장 일반적으로 사용되는 인증 방법. 액세스 토큰을 받아오기 위해 Authorization Code를 받아 액세스 토큰과 교환하는 방법이다.</p>
    </li>
    <li>
      <p>Refresh Token Grant Type: 일정기간 유효시간이 지나서 만료된 액세스 토큰을 편리하게 받아오기 위해 사용하는 방법. Access token보다 Refresh token의 유효시간을 더 길게 설정하기 때문에 가능한 방법이다.</p>
    </li>
  </ol>
</blockquote>

<h2 id="7-sprint-코드">7. Sprint 코드</h2>
<p>자세한 내용은 GitHub 또는 VSCode 주석 참고.</p>
<h3 id="7-1-cookie">7. 1. Cookie</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Express에서 CORS 설정.</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">(</span>
        <span class="nx">origins</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://localhost:3000</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// Access-Control-Origin 설정. CORS 요청을 허용할 주소이다.</span>
        <span class="nx">methods</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">OPTIONS</span><span class="dl">'</span><span class="p">],</span> <span class="c1">// Access-Control-Allow-Method 설정. CORS 요청으로 허용할 METHOD</span>
        <span class="nx">credentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// Access-Control-Allow-Credentials 설정. 쿠키를 헤더로 전송하는 것을 허용하려면 true.</span>
    <span class="p">))</span>

<span class="c1">// Express Cookie-Parser</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cookieParser</span><span class="p">());</span> <span class="c1">// Cookie-parser는 쿠키 헤더를 분석하여 이를 req.cookies에 객체 형태로 담아낸다.</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Express UrlEncoded</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}))</span>
    <span class="c1">// bodyParser는 "application/json" 방식의 데이터를 받아 변환한다.</span>
    <span class="c1">// urlEncoded는 "application/x-www-form-urlencoded" 방식의 데이터를 받아 변환한다.</span>

    <span class="c1">// * Extended: true: URL 인코딩 데이터를 npm: qs library로 parse한다.</span>
    <span class="c1">// * 쿼리 문자열에서 중첩된 Ojbect를 생성할 수 있다. ?를 필터링하지 않는다.</span>
    <span class="c1">// qs.parse("person[name]=bobby&amp;person[age]=3") ... { person: { name: 'bobby', age: '3' } }</span>
    <span class="c1">// qs.parse("?a=b") ... { '?a': 'b' }</span>

    <span class="c1">// * Extended: false: URL 인코딩 데이터를 npm: query-string lirary으로 parse한다.</span>
    <span class="c1">// * 쿼리 문자열에서 중첩된 Object를 생성할 수 없다. ?를 필터링한다.</span>
    <span class="c1">// queryString.parse("person[name]=bobby&amp;person[age]=3") ... { 'person[age]': 3, 'person[name]': 'bobby' }</span>
    <span class="c1">// queryString.parse("?a=b") ... { a: 'b' }</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// res.cookie 설정</span>
    <span class="c1">// ! res.cookie: Cookie의 이름과 속성값을 설정한다.</span>

    <span class="c1">// ? domain: 쿠키를 적용할 호스트를 지정한다. 서브도메인도 항상 포함.</span>

    <span class="c1">// ? path: 요청된 URL에 있어야하는 경로. 없으면 브라우저가 쿠키헤더를 안보낸다. 하위 경로 모두 포함.</span>

    <span class="c1">// ? secure: 클라이언트와 서버가 HTTPS로 통신할 경우에만, 브라우저가 서버로 쿠키를 전송하는 옵션.</span>

    <span class="c1">// ? httpOnly: XXS 공격을 막고자, 자바스크립트의 document.cookie로 쿠키에 접속하는 것을 막는 옵션.</span>

    <span class="c1">// ? sameSite: CORS 요청시(서로 다른 도메인 간) 쿠키전송에 대한 보안 설정.</span>
    <span class="c1">// * None: 동일 도메인, 크로스 사이트 모두 쿠키전송 가능. Strict: 서로 다른 도메인 전송 불가능</span>
    <span class="c1">// * Lax: Strict 설정에서 일부 예외(HTTP GET Method, a href, link href)를 둔 것.</span>
    <span class="c1">// * 크롬 80 버전부터 새로운 쿠키 정책이 적용되어 SameSite 속성 기본값이 "None" --&gt; "Lax"로 변경</span>

    <span class="nx">res</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userInfo</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span> <span class="na">domain</span><span class="p">:</span> <span class="dl">"</span><span class="s2">localhost</span><span class="dl">"</span><span class="p">,</span> <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">secure</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">sameSite</span><span class="p">:</span> <span class="dl">"</span><span class="s2">none</span><span class="dl">"</span> <span class="p">})</span>
      <span class="p">.</span><span class="nx">json</span><span class="p">({</span>
        <span class="na">data</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span>
      <span class="p">})</span>

<span class="c1">// res.clearCookie 쿠키 제거</span>
    <span class="c1">// ? res.clearCookie()는 쿠키의 특정 부분을 제거한다. (쿠키는 이름으로만 되어있다는 것을 생각하자)</span>
    <span class="c1">// ? 가령 res.clearCookie("id")는 쿠키의 id="...."에서 "..."를 제거한다. </span>

    <span class="nx">res</span><span class="p">.</span><span class="nx">clearCookie</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span> <span class="p">});</span>

</code></pre></div></div>

<h3 id="7-2-session">7. 2. Session</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Express-Session</span>
  <span class="c1">// 클라이언트가 세션 쿠키가 포함되지 않은 요청을 보내면, Express Session은 새로운 세션을 생성한다.</span>

  <span class="c1">// * 1. 새로운 Unique 세션ID 생성.</span>
  <span class="c1">// * 2. 생성한 세션ID를 쿠키에 저장. 이를 토대로 클라이언트 식별.</span>
  <span class="c1">// * 3. req.session으로 빈 세션 객체를 생성.</span>

  <span class="c1">// 세션 데이터는 쿠키 자체에 저장되지 않으며, 클라이언트를 식별하는 ID만 저장된다. 즉, 실질적인 데이터는 서버가 가지고 있으며 관리.</span>
  <span class="c1">// 별도로 저장소를 설정하지 않으면 Memory Store가 기본 세션 저장소로 설정됨.</span>
  <span class="c1">// 메모리 스토어는 대부분의 조건에서 메모리가 누출되므로 디버깅 및 개발 목적으로만 사용할 것.</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span>
    <span class="nx">session</span><span class="p">({</span>
      <span class="na">secret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@codestates</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// * 필수옵션: 세션을 암호화한다. Salting에 사용할 문자열이나 배열을 입력해야 한다. 변경하면 기존 세션은 무효화된다.</span>
      <span class="na">resave</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// * 세션이 수정되지 않더라도 다시 저장할지 (즉, 변경사항이 없음에도 덮어씌울 것인지) 여부를 결정. 일반적으로 false</span>
      <span class="na">saveUninitialized</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// * 세션을 저장하기 전에 초기화 되지 않은 상태로 미리 만들어서 저장한다. 일반적으로 true</span>
      <span class="na">cookie</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// * 세션ID 쿠키에 대한 설정. 쿠키 이름을 설정한다. Cookie-parser 사용하듯이 설정하면 된다.</span>
        <span class="na">domain</span><span class="p">:</span> <span class="dl">"</span><span class="s2">localhost</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">maxAge</span><span class="p">:</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">10000</span><span class="p">,</span> <span class="c1">// * 쿠키가 만료될 때까지 소요되는 시간(단위: Seconds)이다.</span>
        <span class="na">sameSite</span><span class="p">:</span> <span class="dl">"</span><span class="s2">none</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">secure</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">})</span>
  <span class="p">);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// req.session</span>
      <span class="c1">// ! 세션에 클라이언트를 식별할 수 있는 키를 저장해야 한다.</span>

      <span class="c1">// * req.session 객체에 직접 Key-Value를 지정하여도 되고</span>
      <span class="c1">// * req.session.save(() =&gt; {req.session.userId = userInfo.userId})로 전용 메서드를 사용하여도 된다. 후자는 강제적으로 실행하여 보다 확실한 방법이다.</span>
      
      <span class="c1">// ? req.cookies가 쿠키를 객체화한 것처럼, req.session도 세션을 객체화한 것이다.</span>
      <span class="c1">// ? req.session으로 세션을 수정 또는 탐색할 수 있다.</span>
      <span class="c1">// ? 여기서는 특정 사용자의 아이디를 userId라는 임의의 키에 저장하는 것으로 정하였다.</span>

      <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">userId</span> <span class="o">=</span> <span class="nx">userInfo</span><span class="p">.</span><span class="nx">id</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
        <span class="na">data</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span>
      <span class="p">})</span>

<span class="c1">// logout</span>
    <span class="c1">// * Session Cookie: 식별정보를 쿠키에 저장하는 정책을 허용할 경우, 클라이언트 쿠키에 저장한 세션 데이터 전체를 의미.</span>
    <span class="c1">// * Session ID: 쿠키에 종속됨. 고유 의미는 사용자의 세션을 식별하기 위한 ID값 (물론 하나의 사용자가 여러 개의 세션ID을 가질 수 있다.)</span>
    <span class="c1">// * 여러 ID를 넣어줄 수 있으니까.</span>

    <span class="c1">// * 서버가 클라이언트에 Session ID를 부여하는 방법 중 하나가 쿠키를 이용한 것.</span>
    <span class="c1">// * Session ID를 클라이언트에 저장하기 위해 쿠키를 사용한다.</span>
    <span class="c1">// * 서버는 클라이언트가 누구인지 식별하기 위해 쿠기 안에 담겨있는 Session ID를 참고한다.</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">not authorized</span><span class="dl">"</span> <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// ? 세션을 파괴하고  req.session 속성을 해제한다. 콜백함수로 에러 핸들링이 가능.</span>
      <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span> <span class="p">})</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="7-3-token">7. 3. Token</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Router 설정: Access token, Request token 분기를 만들어준다.</span>
  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/accesstokenrequest</span><span class="dl">"</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">accessTokenRequest</span><span class="p">);</span>
  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/refreshtokenrequest</span><span class="dl">"</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">refreshTokenRequest</span><span class="p">);</span>

<span class="c1">// 1. Login</span>
  <span class="c1">//   a. 클라이언트에서 전송한 아이디와 비밀번호가 유효한지 데이터베이스와 비교</span>
  <span class="c1">//   b. 유효하면 필요한 사용자 정보를 담은 Refresh token, Access token 생성하여 클라이언트로 전달. 아니면 에러 핸들링 등</span>

<span class="c1">// 2. Access token requset: 실질적으로 유저가 권한이 있는지 확인한다.</span>
  <span class="c1">//   a. 요청 헤더에 담긴 Authorization이 유효한 Access token인지 확인한다. </span>
  <span class="c1">//   b. 유효한 토큰이면, 클라이언트가 요청한 정보를 송신한다. 아니면 에러 핸들링 등</span>

<span class="c1">// 3. Refresh token request: 쿠키에 담긴 Refresh token을 확인하여 Access Token을 갱신하고, 사용자가 요청한 정보를 전달.</span>
  <span class="c1">//   a. Cookie에 담겨있는 Refresh token을 확인.</span>
  <span class="c1">//   b. 유효한 토큰이면 새로운 Access token을 생성하고, 클라이언트가 요청한 정보를 함께 송신한다.</span>


<span class="c1">// JSON Web Token</span>
  <span class="c1">// jwt.sign: 암호화. Access secret or Refresh secret으로 새로운 토큰 생성.</span>
    <span class="c1">// * jwt.sign(data, process.env.ACCESS_SECRET, {expiresIn: "15s"})</span>
    <span class="c1">// * jwt.sign(data, process.env.REFRESH_SECRET, {expiresIn: "30d"})</span>

  <span class="c1">// jwt.verify: 복호화. 토큰을 해독한다.</span>
    <span class="c1">// * jwt.verify(token, process.env.REFRESH_SECRET)</span>

  <span class="c1">// Auth, Token 확인 시</span>
    <span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">authorization</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">auth</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">auth</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
    <span class="c1">//   ....</span>
</code></pre></div></div>
<h3 id="7-4-oauth2">7. 4. OAuth2</h3>

:ET