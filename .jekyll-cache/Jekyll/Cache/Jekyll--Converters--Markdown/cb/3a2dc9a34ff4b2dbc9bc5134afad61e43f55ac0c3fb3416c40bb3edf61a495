I"/1<h2 id="1-트리tree">1. 트리(Tree)</h2>
<p>먼저 트리의 구성요소를 살펴보도록 하자.</p>
<blockquote>
  <p>노드(Node): 데이터가 담기는 공간. 도식 상에서는 점으로 표시한다.</p>

  <p>엣지(Edge): 노드와 노드 사이를 연결한 선. 노드 사이의 관계를 나타낸다.</p>

  <p>높이(Height): 최상단에 위치한 루트노드(root)를 기준으로 최하단에 위치한 노트에 이르는 가장 경로 중 가장 긴 경로이다.</p>

  <p>레벨(Level): 루트 노트를 기준으로 해당 노드가 어떤 깊이에 있는지 나타낸다. 가령, 루트노트의 자식노드들은 레벨(또는 깊이)가 1이다.</p>
</blockquote>

<p>트리의 구조 중 대표적인 것이 이진트리이다. 이진트리는 자식노드의 최대 갯수가 2개인 것이 특징이다. 이진트리는 정이진트리, 완전이진트리, 균형이진트리 등이 있다.</p>

<blockquote>
  <p>정이진트리(Full binary tree)는 잎새노드를 제외한 모든 레벨에서 노드가 자식노드를 가지고 있는 구조.</p>

  <p>완전이진트리(Complete binary tree)는 마지막 레벨을 제외한 모든 레벨에서 노드들이 꽉 차있는 구조.</p>
</blockquote>

<p>트리의 각 노도들을 탐색하는 방법을 트리순회(Tree traversal)이라고 한다. 중복과 누락되는 노드가 없이 탐색해야 하는데, 대표적인 순회방법에는 전위순회(Preorder), 중위순회(Inorder), 후위순회(Postorder)가 있다.</p>

<blockquote>
  <p>전위순회(Preorder): 노드 - 좌측노드 - 우측노드</p>
  <ol>
    <li>노드를 탐색한다.</li>
    <li>좌측 서브트리를 전위순회한다.</li>
    <li>우측 서브트리를 전위순회한다.   <br />
깊이 우선탐색에 사용된다.</li>
  </ol>
</blockquote>

<blockquote>
  <p>중위순회(Inorder): 좌측노드 - 노드 - 우측노드</p>
  <ol>
    <li>좌측 서브트리를 중위순회한다.</li>
    <li>노드를 탐색한다.</li>
    <li>우측 서브트리를 중위순회한다.</li>
  </ol>
</blockquote>

<blockquote>
  <p>후위순회(Postorder): 좌측노드 - 우측노드 - 노드</p>
  <ol>
    <li>좌측 서브트리를 후위순회한다.</li>
    <li>우측 서브트리를 후위순회한다.</li>
    <li>노드를 탐색한다.</li>
  </ol>

</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">TreeNode</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="nx">insertNode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TreeNode</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">contains</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="nx">value</span> <span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">child</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span> <span class="nx">child</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">)</span> <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="2-이진탐색트리binary-search-tree">2. 이진탐색트리(Binary Search Tree)</h2>
<p>이진탐색과 연결리스트가 결합한 자료구조 형태. 연결리스트는 자료의 추가와 삭제가 $O(1)$이 소요되지만, 자료 탐색에는 $O(n)$이 소요된다. 이를 해결하고자 시간복잡도가 $O(n)$인 이진탐색 방식을 결합한 것.</p>

<p>이진탐색트리에는 정해진 규칙이 있다. 부모노드보다 큰 값은 우측에, 더 작은 값은 좌측에 배치한다. 중복된 값을 갖는 노드는 존재하지 않는다.</p>

<p>이진탐색트리를 순회할 때에는 중위순회(Inorder) 방식을 사용한다. 다음 예제를 살펴보도록 하자.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">BinarySearchTreeNode</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">insert</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinarySearchTreeNode</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span> <span class="nx">value</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
            <span class="c1">// value &lt; this.value</span>
            <span class="k">if</span> <span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">===</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">{</span>
            <span class="c1">// value &gt; this.value</span>
            <span class="k">if</span> <span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">===</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
            <span class="c1">// value === this.value</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">contains</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span> <span class="nx">value</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">value</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="p">)</span> <span class="k">return</span> <span class="o">!!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">value</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="p">)</span> <span class="k">return</span> <span class="o">!!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="nx">inorder</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 중위순회는 좌측 - 중앙 - 우측노드 순서로 탐색 및 실행한다.</span>
        <span class="k">if</span> <span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">inorder</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
        <span class="nx">callback</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">inorder</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-refernece">3. Refernece</h2>
<p><a href="https://ratsgo.github.io/data%20structure&amp;algorithm/2017/10/21/tree/">트리(tree)와 이진트리(binary tree)</a>  <br />
<a href="https://ratsgo.github.io/data%20structure&amp;algorithm/2017/10/22/bst">이진탐색트리(Binary Search Tree)</a></p>
:ET